//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JPath.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BuildXL.Execution.Analyzer.JPath {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class JPathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, WS=15, NOT=16, AND=17, 
		OR=18, XOR=19, IFF=20, GTE=21, LTE=22, GT=23, LT=24, EQ=25, NEQ=26, MATCH=27, 
		NMATCH=28, MINUS=29, PLUS=30, TIMES=31, DIV=32, MOD=33, CONCAT=34, INTERSECT=35, 
		IntLit=36, StrLit=37, RegExLit=38, PropertyId=39, VarId=40, EscID=41, 
		Opt=42;
	public const int
		RULE_intBinaryOp = 0, RULE_intUnaryOp = 1, RULE_boolBinaryOp = 2, RULE_logicBinaryOp = 3, 
		RULE_logicUnaryOp = 4, RULE_arrayBinaryOp = 5, RULE_anyBinaryOp = 6, RULE_intExpr = 7, 
		RULE_boolExpr = 8, RULE_logicExpr = 9, RULE_prop = 10, RULE_selector = 11, 
		RULE_literal = 12, RULE_expr = 13;
	public static readonly string[] ruleNames = {
		"intBinaryOp", "intUnaryOp", "boolBinaryOp", "logicBinaryOp", "logicUnaryOp", 
		"arrayBinaryOp", "anyBinaryOp", "intExpr", "boolExpr", "logicExpr", "prop", 
		"selector", "literal", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'$'", "'.'", "'['", "']'", "'..'", "'#'", "','", 
		"'|'", "'let'", "':='", "'in'", "';'", null, "'not'", "'and'", "'or'", 
		"'xor'", "'iff'", "'>='", "'<='", "'>'", "'<'", "'='", "'!='", "'~'", 
		"'!~'", "'-'", "'+'", "'*'", "'/'", "'%'", "'++'", "'&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "WS", "NOT", "AND", "OR", "XOR", "IFF", "GTE", "LTE", 
		"GT", "LT", "EQ", "NEQ", "MATCH", "NMATCH", "MINUS", "PLUS", "TIMES", 
		"DIV", "MOD", "CONCAT", "INTERSECT", "IntLit", "StrLit", "RegExLit", "PropertyId", 
		"VarId", "EscID", "Opt"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JPath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JPathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JPathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JPathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class IntBinaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode PLUS() { return GetToken(JPathParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JPathParser.MINUS, 0); }
		public ITerminalNode TIMES() { return GetToken(JPathParser.TIMES, 0); }
		public ITerminalNode DIV() { return GetToken(JPathParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(JPathParser.MOD, 0); }
		public IntBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntBinaryOpContext intBinaryOp() {
		IntBinaryOpContext _localctx = new IntBinaryOpContext(Context, State);
		EnterRule(_localctx, 0, RULE_intBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			_localctx.Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << PLUS) | (1L << TIMES) | (1L << DIV) | (1L << MOD))) != 0)) ) {
				_localctx.Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntUnaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode MINUS() { return GetToken(JPathParser.MINUS, 0); }
		public IntUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intUnaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntUnaryOpContext intUnaryOp() {
		IntUnaryOpContext _localctx = new IntUnaryOpContext(Context, State);
		EnterRule(_localctx, 2, RULE_intUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; _localctx.Token = Match(MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolBinaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode GTE() { return GetToken(JPathParser.GTE, 0); }
		public ITerminalNode GT() { return GetToken(JPathParser.GT, 0); }
		public ITerminalNode LTE() { return GetToken(JPathParser.LTE, 0); }
		public ITerminalNode LT() { return GetToken(JPathParser.LT, 0); }
		public ITerminalNode EQ() { return GetToken(JPathParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(JPathParser.NEQ, 0); }
		public ITerminalNode MATCH() { return GetToken(JPathParser.MATCH, 0); }
		public ITerminalNode NMATCH() { return GetToken(JPathParser.NMATCH, 0); }
		public BoolBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBoolBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBoolBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolBinaryOpContext boolBinaryOp() {
		BoolBinaryOpContext _localctx = new BoolBinaryOpContext(Context, State);
		EnterRule(_localctx, 4, RULE_boolBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_localctx.Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GTE) | (1L << LTE) | (1L << GT) | (1L << LT) | (1L << EQ) | (1L << NEQ) | (1L << MATCH) | (1L << NMATCH))) != 0)) ) {
				_localctx.Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicBinaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode AND() { return GetToken(JPathParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JPathParser.OR, 0); }
		public ITerminalNode XOR() { return GetToken(JPathParser.XOR, 0); }
		public ITerminalNode IFF() { return GetToken(JPathParser.IFF, 0); }
		public LogicBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLogicBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLogicBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicBinaryOpContext logicBinaryOp() {
		LogicBinaryOpContext _localctx = new LogicBinaryOpContext(Context, State);
		EnterRule(_localctx, 6, RULE_logicBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			_localctx.Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << XOR) | (1L << IFF))) != 0)) ) {
				_localctx.Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicUnaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode NOT() { return GetToken(JPathParser.NOT, 0); }
		public LogicUnaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicUnaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLogicUnaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLogicUnaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicUnaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicUnaryOpContext logicUnaryOp() {
		LogicUnaryOpContext _localctx = new LogicUnaryOpContext(Context, State);
		EnterRule(_localctx, 8, RULE_logicUnaryOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; _localctx.Token = Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayBinaryOpContext : ParserRuleContext {
		public IToken Token;
		public ITerminalNode CONCAT() { return GetToken(JPathParser.CONCAT, 0); }
		public ITerminalNode INTERSECT() { return GetToken(JPathParser.INTERSECT, 0); }
		public ArrayBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterArrayBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitArrayBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayBinaryOpContext arrayBinaryOp() {
		ArrayBinaryOpContext _localctx = new ArrayBinaryOpContext(Context, State);
		EnterRule(_localctx, 10, RULE_arrayBinaryOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			_localctx.Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CONCAT || _la==INTERSECT) ) {
				_localctx.Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyBinaryOpContext : ParserRuleContext {
		public IntBinaryOpContext intBinaryOp() {
			return GetRuleContext<IntBinaryOpContext>(0);
		}
		public BoolBinaryOpContext boolBinaryOp() {
			return GetRuleContext<BoolBinaryOpContext>(0);
		}
		public LogicBinaryOpContext logicBinaryOp() {
			return GetRuleContext<LogicBinaryOpContext>(0);
		}
		public ArrayBinaryOpContext arrayBinaryOp() {
			return GetRuleContext<ArrayBinaryOpContext>(0);
		}
		public AnyBinaryOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyBinaryOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterAnyBinaryOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitAnyBinaryOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyBinaryOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyBinaryOpContext anyBinaryOp() {
		AnyBinaryOpContext _localctx = new AnyBinaryOpContext(Context, State);
		EnterRule(_localctx, 12, RULE_anyBinaryOp);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
			case PLUS:
			case TIMES:
			case DIV:
			case MOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; intBinaryOp();
				}
				break;
			case GTE:
			case LTE:
			case GT:
			case LT:
			case EQ:
			case NEQ:
			case MATCH:
			case NMATCH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; boolBinaryOp();
				}
				break;
			case AND:
			case OR:
			case XOR:
			case IFF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 42; logicBinaryOp();
				}
				break;
			case CONCAT:
			case INTERSECT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 43; arrayBinaryOp();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntExprContext : ParserRuleContext {
		public IntExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intExpr; } }
	 
		public IntExprContext() { }
		public virtual void CopyFrom(IntExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryIntExprContext : IntExprContext {
		public IntExprContext Lhs;
		public IntBinaryOpContext Op;
		public IntExprContext Rhs;
		public IntExprContext[] intExpr() {
			return GetRuleContexts<IntExprContext>();
		}
		public IntExprContext intExpr(int i) {
			return GetRuleContext<IntExprContext>(i);
		}
		public IntBinaryOpContext intBinaryOp() {
			return GetRuleContext<IntBinaryOpContext>(0);
		}
		public BinaryIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprIntExprContext : IntExprContext {
		public ExprContext Expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterExprIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitExprIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryIntExprContext : IntExprContext {
		public IntUnaryOpContext Op;
		public IntExprContext Sub;
		public IntUnaryOpContext intUnaryOp() {
			return GetRuleContext<IntUnaryOpContext>(0);
		}
		public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public UnaryIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnaryIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnaryIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubIntExprContext : IntExprContext {
		public IntExprContext Sub;
		public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public SubIntExprContext(IntExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubIntExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubIntExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubIntExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntExprContext intExpr() {
		return intExpr(0);
	}

	private IntExprContext intExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IntExprContext _localctx = new IntExprContext(Context, _parentState);
		IntExprContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_intExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new ExprIntExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 47; ((ExprIntExprContext)_localctx).Expr = expr(0);
				}
				break;
			case 2:
				{
				_localctx = new UnaryIntExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 48; ((UnaryIntExprContext)_localctx).Op = intUnaryOp();
				State = 49; ((UnaryIntExprContext)_localctx).Sub = intExpr(3);
				}
				break;
			case 3:
				{
				_localctx = new SubIntExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 51; Match(T__0);
				State = 52; ((SubIntExprContext)_localctx).Sub = intExpr(0);
				State = 53; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryIntExprContext(new IntExprContext(_parentctx, _parentState));
					((BinaryIntExprContext)_localctx).Lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_intExpr);
					State = 57;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 58; ((BinaryIntExprContext)_localctx).Op = intBinaryOp();
					State = 59; ((BinaryIntExprContext)_localctx).Rhs = intExpr(3);
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolExprContext : ParserRuleContext {
		public BoolExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolExpr; } }
	 
		public BoolExprContext() { }
		public virtual void CopyFrom(BoolExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryBoolExprContext : BoolExprContext {
		public IntExprContext Lhs;
		public BoolBinaryOpContext Op;
		public IntExprContext Rhs;
		public IntExprContext[] intExpr() {
			return GetRuleContexts<IntExprContext>();
		}
		public IntExprContext intExpr(int i) {
			return GetRuleContext<IntExprContext>(i);
		}
		public BoolBinaryOpContext boolBinaryOp() {
			return GetRuleContext<BoolBinaryOpContext>(0);
		}
		public BinaryBoolExprContext(BoolExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryBoolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubBoolExprContext : BoolExprContext {
		public BoolExprContext Sub;
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public SubBoolExprContext(BoolExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubBoolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolExprContext boolExpr() {
		BoolExprContext _localctx = new BoolExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_boolExpr);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new BinaryBoolExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; ((BinaryBoolExprContext)_localctx).Lhs = intExpr(0);
				State = 67; ((BinaryBoolExprContext)_localctx).Op = boolBinaryOp();
				State = 68; ((BinaryBoolExprContext)_localctx).Rhs = intExpr(0);
				}
				break;
			case 2:
				_localctx = new SubBoolExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; Match(T__0);
				State = 71; ((SubBoolExprContext)_localctx).Sub = boolExpr();
				State = 72; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicExprContext : ParserRuleContext {
		public LogicExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpr; } }
	 
		public LogicExprContext() { }
		public virtual void CopyFrom(LogicExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolLogicExprContext : LogicExprContext {
		public BoolExprContext Expr;
		public BoolExprContext boolExpr() {
			return GetRuleContext<BoolExprContext>(0);
		}
		public BoolLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBoolLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBoolLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryLogicExprContext : LogicExprContext {
		public LogicUnaryOpContext Op;
		public LogicExprContext Sub;
		public LogicUnaryOpContext logicUnaryOp() {
			return GetRuleContext<LogicUnaryOpContext>(0);
		}
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public UnaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnaryLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnaryLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubLogicExprContext : LogicExprContext {
		public LogicExprContext Sub;
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public SubLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryLogicExprContext : LogicExprContext {
		public LogicExprContext Lhs;
		public LogicBinaryOpContext Op;
		public LogicExprContext Rhs;
		public LogicExprContext[] logicExpr() {
			return GetRuleContexts<LogicExprContext>();
		}
		public LogicExprContext logicExpr(int i) {
			return GetRuleContext<LogicExprContext>(i);
		}
		public LogicBinaryOpContext logicBinaryOp() {
			return GetRuleContext<LogicBinaryOpContext>(0);
		}
		public BinaryLogicExprContext(LogicExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinaryLogicExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinaryLogicExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLogicExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicExprContext logicExpr() {
		return logicExpr(0);
	}

	private LogicExprContext logicExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicExprContext _localctx = new LogicExprContext(Context, _parentState);
		LogicExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_logicExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				_localctx = new BoolLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 77; ((BoolLogicExprContext)_localctx).Expr = boolExpr();
				}
				break;
			case 2:
				{
				_localctx = new UnaryLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 78; ((UnaryLogicExprContext)_localctx).Op = logicUnaryOp();
				State = 79; ((UnaryLogicExprContext)_localctx).Sub = logicExpr(2);
				}
				break;
			case 3:
				{
				_localctx = new SubLogicExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 81; Match(T__0);
				State = 82; ((SubLogicExprContext)_localctx).Sub = logicExpr(0);
				State = 83; Match(T__1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 93;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinaryLogicExprContext(new LogicExprContext(_parentctx, _parentState));
					((BinaryLogicExprContext)_localctx).Lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_logicExpr);
					State = 87;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 88; ((BinaryLogicExprContext)_localctx).Op = logicBinaryOp();
					State = 89; ((BinaryLogicExprContext)_localctx).Rhs = logicExpr(4);
					}
					} 
				}
				State = 95;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PropContext : ParserRuleContext {
		public PropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prop; } }
	 
		public PropContext() { }
		public virtual void CopyFrom(PropContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EscIdContext : PropContext {
		public IToken PropertyName;
		public ITerminalNode EscID() { return GetToken(JPathParser.EscID, 0); }
		public EscIdContext(PropContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterEscId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitEscId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyIdContext : PropContext {
		public IToken PropertyName;
		public ITerminalNode PropertyId() { return GetToken(JPathParser.PropertyId, 0); }
		public PropertyIdContext(PropContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterPropertyId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitPropertyId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropContext prop() {
		PropContext _localctx = new PropContext(Context, State);
		EnterRule(_localctx, 20, RULE_prop);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PropertyId:
				_localctx = new PropertyIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; ((PropertyIdContext)_localctx).PropertyName = Match(PropertyId);
				}
				break;
			case EscID:
				_localctx = new EscIdContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; ((EscIdContext)_localctx).PropertyName = Match(EscID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
	 
		public SelectorContext() { }
		public virtual void CopyFrom(SelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdSelectorContext : SelectorContext {
		public PropContext Name;
		public PropContext prop() {
			return GetRuleContext<PropContext>(0);
		}
		public IdSelectorContext(SelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIdSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIdSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdSelector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionSelectorContext : SelectorContext {
		public PropContext _prop;
		public IList<PropContext> _Names = new List<PropContext>();
		public PropContext[] prop() {
			return GetRuleContexts<PropContext>();
		}
		public PropContext prop(int i) {
			return GetRuleContext<PropContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(JPathParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(JPathParser.PLUS, i);
		}
		public UnionSelectorContext(SelectorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterUnionSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitUnionSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 22, RULE_selector);
		int _la;
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PropertyId:
			case EscID:
				_localctx = new IdSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 100; ((IdSelectorContext)_localctx).Name = prop();
				}
				break;
			case T__0:
				_localctx = new UnionSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; Match(T__0);
				State = 102; ((UnionSelectorContext)_localctx)._prop = prop();
				((UnionSelectorContext)_localctx)._Names.Add(((UnionSelectorContext)_localctx)._prop);
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 103; Match(PLUS);
					State = 104; ((UnionSelectorContext)_localctx)._prop = prop();
					((UnionSelectorContext)_localctx)._Names.Add(((UnionSelectorContext)_localctx)._prop);
					}
					}
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==PLUS );
				State = 109; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RegExLitExprContext : LiteralContext {
		public IToken Value;
		public ITerminalNode RegExLit() { return GetToken(JPathParser.RegExLit, 0); }
		public RegExLitExprContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRegExLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRegExLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegExLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntLitExprContext : LiteralContext {
		public IToken Value;
		public ITerminalNode IntLit() { return GetToken(JPathParser.IntLit, 0); }
		public IntLitExprContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIntLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIntLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StrLitExprContext : LiteralContext {
		public IToken Value;
		public ITerminalNode StrLit() { return GetToken(JPathParser.StrLit, 0); }
		public StrLitExprContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterStrLitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitStrLitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrLitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_literal);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StrLit:
				_localctx = new StrLitExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 113; ((StrLitExprContext)_localctx).Value = Match(StrLit);
				}
				break;
			case RegExLit:
				_localctx = new RegExLitExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; ((RegExLitExprContext)_localctx).Value = Match(RegExLit);
				}
				break;
			case IntLit:
				_localctx = new IntLitExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 115; ((IntLitExprContext)_localctx).Value = Match(IntLit);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MapExprContext : ExprContext {
		public ExprContext Lhs;
		public SelectorContext Selector;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public MapExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterMapExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitMapExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncOptExprContext : ExprContext {
		public ExprContext Func;
		public IToken OptName;
		public LiteralContext OptValue;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Opt() { return GetToken(JPathParser.Opt, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FuncOptExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterFuncOptExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitFuncOptExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncOptExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CardinalityExprContext : ExprContext {
		public ExprContext Sub;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CardinalityExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterCardinalityExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitCardinalityExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCardinalityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LetExprContext : ExprContext {
		public IToken Var;
		public ExprContext Val;
		public ExprContext Sub;
		public ITerminalNode VarId() { return GetToken(JPathParser.VarId, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public LetExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLetExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLetExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubExprContext : ExprContext {
		public ExprContext Sub;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSubExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSubExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinExprContext : ExprContext {
		public ExprContext Lhs;
		public AnyBinaryOpContext Op;
		public ExprContext Rhs;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AnyBinaryOpContext anyBinaryOp() {
			return GetRuleContext<AnyBinaryOpContext>(0);
		}
		public BinExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterBinExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitBinExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RangeExprContext : ExprContext {
		public ExprContext Lhs;
		public IntExprContext Begin;
		public IntExprContext End;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntExprContext[] intExpr() {
			return GetRuleContexts<IntExprContext>();
		}
		public IntExprContext intExpr(int i) {
			return GetRuleContext<IntExprContext>(i);
		}
		public RangeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRangeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRangeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExprContext : ExprContext {
		public ExprContext Lhs;
		public IntExprContext Index;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IntExprContext intExpr() {
			return GetRuleContext<IntExprContext>(0);
		}
		public IndexExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterIndexExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitIndexExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExprContext : ExprContext {
		public IToken Var;
		public ExprContext Val;
		public ITerminalNode VarId() { return GetToken(JPathParser.VarId, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectorExprContext : ExprContext {
		public SelectorContext Sub;
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public SelectorExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterSelectorExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitSelectorExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FilterExprContext : ExprContext {
		public ExprContext Lhs;
		public LogicExprContext Filter;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LogicExprContext logicExpr() {
			return GetRuleContext<LogicExprContext>(0);
		}
		public FilterExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterFilterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitFilterExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RootExprContext : ExprContext {
		public RootExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterRootExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitRootExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PipeExprContext : ExprContext {
		public ExprContext Input;
		public ExprContext Func;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PipeExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterPipeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitPipeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarExprContext : ExprContext {
		public IToken Var;
		public ITerminalNode VarId() { return GetToken(JPathParser.VarId, 0); }
		public VarExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterVarExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitVarExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExprContext : ExprContext {
		public LiteralContext Lit;
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterLiteralExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitLiteralExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncAppExprParenContext : ExprContext {
		public ExprContext Func;
		public ExprContext _expr;
		public IList<ExprContext> _Args = new List<ExprContext>();
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FuncAppExprParenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.EnterFuncAppExprParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJPathListener typedListener = listener as IJPathListener;
			if (typedListener != null) typedListener.ExitFuncAppExprParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJPathVisitor<TResult> typedVisitor = visitor as IJPathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncAppExprParen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new RootExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 119; Match(T__2);
				}
				break;
			case 2:
				{
				_localctx = new VarExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120; ((VarExprContext)_localctx).Var = Match(VarId);
				}
				break;
			case 3:
				{
				_localctx = new SelectorExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121; ((SelectorExprContext)_localctx).Sub = selector();
				}
				break;
			case 4:
				{
				_localctx = new LiteralExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 122; ((LiteralExprContext)_localctx).Lit = literal();
				}
				break;
			case 5:
				{
				_localctx = new CardinalityExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 123; Match(T__7);
				State = 124; ((CardinalityExprContext)_localctx).Sub = expr(8);
				}
				break;
			case 6:
				{
				_localctx = new SubExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 125; Match(T__0);
				State = 126; ((SubExprContext)_localctx).Sub = expr(0);
				State = 127; Match(T__1);
				}
				break;
			case 7:
				{
				_localctx = new LetExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 129; Match(T__10);
				State = 130; ((LetExprContext)_localctx).Var = Match(VarId);
				State = 131; Match(T__11);
				State = 132; ((LetExprContext)_localctx).Val = expr(0);
				State = 133; Match(T__12);
				State = 135;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 134; ((LetExprContext)_localctx).Sub = expr(0);
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new AssignExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137; ((AssignExprContext)_localctx).Var = Match(VarId);
				State = 138; Match(T__11);
				State = 139; ((AssignExprContext)_localctx).Val = expr(0);
				State = 141;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 140; Match(T__13);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 189;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new PipeExprContext(new ExprContext(_parentctx, _parentState));
						((PipeExprContext)_localctx).Input = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 145;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 146; Match(T__9);
						State = 147; ((PipeExprContext)_localctx).Func = expr(6);
						}
						break;
					case 2:
						{
						_localctx = new BinExprContext(new ExprContext(_parentctx, _parentState));
						((BinExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 148;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 149; ((BinExprContext)_localctx).Op = anyBinaryOp();
						State = 150; ((BinExprContext)_localctx).Rhs = expr(5);
						}
						break;
					case 3:
						{
						_localctx = new MapExprContext(new ExprContext(_parentctx, _parentState));
						((MapExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 152;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 153; Match(T__3);
						State = 154; ((MapExprContext)_localctx).Selector = selector();
						}
						break;
					case 4:
						{
						_localctx = new FilterExprContext(new ExprContext(_parentctx, _parentState));
						((FilterExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 155;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 156; Match(T__4);
						State = 157; ((FilterExprContext)_localctx).Filter = logicExpr(0);
						State = 158; Match(T__5);
						}
						break;
					case 5:
						{
						_localctx = new IndexExprContext(new ExprContext(_parentctx, _parentState));
						((IndexExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 160;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 161; Match(T__4);
						State = 162; ((IndexExprContext)_localctx).Index = intExpr(0);
						State = 163; Match(T__5);
						}
						break;
					case 6:
						{
						_localctx = new RangeExprContext(new ExprContext(_parentctx, _parentState));
						((RangeExprContext)_localctx).Lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 165;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 166; Match(T__4);
						State = 167; ((RangeExprContext)_localctx).Begin = intExpr(0);
						State = 168; Match(T__6);
						State = 169; ((RangeExprContext)_localctx).End = intExpr(0);
						State = 170; Match(T__5);
						}
						break;
					case 7:
						{
						_localctx = new FuncAppExprParenContext(new ExprContext(_parentctx, _parentState));
						((FuncAppExprParenContext)_localctx).Func = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 172;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 173; Match(T__0);
						State = 174; ((FuncAppExprParenContext)_localctx)._expr = expr(0);
						((FuncAppExprParenContext)_localctx)._Args.Add(((FuncAppExprParenContext)_localctx)._expr);
						State = 179;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==T__8) {
							{
							{
							State = 175; Match(T__8);
							State = 176; ((FuncAppExprParenContext)_localctx)._expr = expr(0);
							((FuncAppExprParenContext)_localctx)._Args.Add(((FuncAppExprParenContext)_localctx)._expr);
							}
							}
							State = 181;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 182; Match(T__1);
						}
						break;
					case 8:
						{
						_localctx = new FuncOptExprContext(new ExprContext(_parentctx, _parentState));
						((FuncOptExprContext)_localctx).Func = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 184;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 185; ((FuncOptExprContext)_localctx).OptName = Match(Opt);
						State = 187;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
						case 1:
							{
							State = 186; ((FuncOptExprContext)_localctx).OptValue = literal();
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return intExpr_sempred((IntExprContext)_localctx, predIndex);
		case 9: return logicExpr_sempred((LogicExprContext)_localctx, predIndex);
		case 13: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool intExpr_sempred(IntExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool logicExpr_sempred(LogicExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 11);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 9);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ',', '\xC5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '/', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', ':', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '@', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\x43', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', 'M', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', 'X', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\a', '\v', '^', '\n', '\v', '\f', '\v', '\xE', '\v', '\x61', '\v', 
		'\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x65', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x6', '\r', 
		'l', '\n', '\r', '\r', '\r', '\xE', '\r', 'm', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', 'r', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', 'w', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x8A', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x90', '\n', '\xF', '\x5', '\xF', '\x92', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xB4', '\n', '\xF', '\f', 
		'\xF', '\xE', '\xF', '\xB7', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xBE', '\n', 
		'\xF', '\a', '\xF', '\xC0', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xC3', 
		'\v', '\xF', '\x3', '\xF', '\x2', '\x5', '\x10', '\x14', '\x1C', '\x10', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x2', '\x6', '\x3', '\x2', '\x1F', '#', 
		'\x3', '\x2', '\x17', '\x1E', '\x3', '\x2', '\x13', '\x16', '\x3', '\x2', 
		'$', '%', '\x2', '\xD8', '\x2', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x4', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x6', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\b', '$', '\x3', '\x2', '\x2', '\x2', '\n', '&', '\x3', '\x2', '\x2', 
		'\x2', '\f', '(', '\x3', '\x2', '\x2', '\x2', '\xE', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x39', '\x3', '\x2', '\x2', '\x2', '\x12', 'L', 
		'\x3', '\x2', '\x2', '\x2', '\x14', 'W', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x18', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', 'v', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1F', '\t', '\x2', '\x2', '\x2', '\x1F', 
		'\x3', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\a', '\x1F', '\x2', '\x2', 
		'!', '\x5', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\t', '\x3', '\x2', 
		'\x2', '#', '\a', '\x3', '\x2', '\x2', '\x2', '$', '%', '\t', '\x4', '\x2', 
		'\x2', '%', '\t', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\a', '\x12', 
		'\x2', '\x2', '\'', '\v', '\x3', '\x2', '\x2', '\x2', '(', ')', '\t', 
		'\x5', '\x2', '\x2', ')', '\r', '\x3', '\x2', '\x2', '\x2', '*', '/', 
		'\x5', '\x2', '\x2', '\x2', '+', '/', '\x5', '\x6', '\x4', '\x2', ',', 
		'/', '\x5', '\b', '\x5', '\x2', '-', '/', '\x5', '\f', '\a', '\x2', '.', 
		'*', '\x3', '\x2', '\x2', '\x2', '.', '+', '\x3', '\x2', '\x2', '\x2', 
		'.', ',', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '\xF', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\b', '\t', '\x1', 
		'\x2', '\x31', ':', '\x5', '\x1C', '\xF', '\x2', '\x32', '\x33', '\x5', 
		'\x4', '\x3', '\x2', '\x33', '\x34', '\x5', '\x10', '\t', '\x5', '\x34', 
		':', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x3', '\x2', '\x2', 
		'\x36', '\x37', '\x5', '\x10', '\t', '\x2', '\x37', '\x38', '\a', '\x4', 
		'\x2', '\x2', '\x38', ':', '\x3', '\x2', '\x2', '\x2', '\x39', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '\x35', '\x3', '\x2', '\x2', '\x2', ':', '\x41', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\f', '\x4', '\x2', '\x2', '<', '=', '\x5', '\x2', 
		'\x2', '\x2', '=', '>', '\x5', '\x10', '\t', '\x5', '>', '@', '\x3', '\x2', 
		'\x2', '\x2', '?', ';', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x5', 
		'\x10', '\t', '\x2', '\x45', '\x46', '\x5', '\x6', '\x4', '\x2', '\x46', 
		'G', '\x5', '\x10', '\t', '\x2', 'G', 'M', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', '\x3', '\x2', '\x2', 'I', 'J', '\x5', '\x12', '\n', '\x2', 
		'J', 'K', '\a', '\x4', '\x2', '\x2', 'K', 'M', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x44', '\x3', '\x2', '\x2', '\x2', 'L', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'M', '\x13', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\b', '\v', 
		'\x1', '\x2', 'O', 'X', '\x5', '\x12', '\n', '\x2', 'P', 'Q', '\x5', '\n', 
		'\x6', '\x2', 'Q', 'R', '\x5', '\x14', '\v', '\x4', 'R', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'T', '\a', '\x3', '\x2', '\x2', 'T', 'U', '\x5', '\x14', 
		'\v', '\x2', 'U', 'V', '\a', '\x4', '\x2', '\x2', 'V', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'N', '\x3', '\x2', '\x2', '\x2', 'W', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'S', '\x3', '\x2', '\x2', '\x2', 'X', '_', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\f', '\x5', '\x2', '\x2', 'Z', '[', '\x5', '\b', 
		'\x5', '\x2', '[', '\\', '\x5', '\x14', '\v', '\x6', '\\', '^', '\x3', 
		'\x2', '\x2', '\x2', ']', 'Y', '\x3', '\x2', '\x2', '\x2', '^', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\x3', '\x2', '\x2', '\x2', '`', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\a', ')', '\x2', 
		'\x2', '\x63', '\x65', '\a', '+', '\x2', '\x2', '\x64', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x66', 'r', '\x5', '\x16', '\f', 
		'\x2', 'g', 'h', '\a', '\x3', '\x2', '\x2', 'h', 'k', '\x5', '\x16', '\f', 
		'\x2', 'i', 'j', '\a', ' ', '\x2', '\x2', 'j', 'l', '\x5', '\x16', '\f', 
		'\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '\x4', '\x2', 
		'\x2', 'p', 'r', '\x3', '\x2', '\x2', '\x2', 'q', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'g', '\x3', '\x2', '\x2', '\x2', 'r', '\x19', '\x3', 
		'\x2', '\x2', '\x2', 's', 'w', '\a', '\'', '\x2', '\x2', 't', 'w', '\a', 
		'(', '\x2', '\x2', 'u', 'w', '\a', '&', '\x2', '\x2', 'v', 's', '\x3', 
		'\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'u', '\x3', 
		'\x2', '\x2', '\x2', 'w', '\x1B', '\x3', '\x2', '\x2', '\x2', 'x', 'y', 
		'\b', '\xF', '\x1', '\x2', 'y', '\x92', '\a', '\x5', '\x2', '\x2', 'z', 
		'\x92', '\a', '*', '\x2', '\x2', '{', '\x92', '\x5', '\x18', '\r', '\x2', 
		'|', '\x92', '\x5', '\x1A', '\xE', '\x2', '}', '~', '\a', '\n', '\x2', 
		'\x2', '~', '\x92', '\x5', '\x1C', '\xF', '\n', '\x7F', '\x80', '\a', 
		'\x3', '\x2', '\x2', '\x80', '\x81', '\x5', '\x1C', '\xF', '\x2', '\x81', 
		'\x82', '\a', '\x4', '\x2', '\x2', '\x82', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\a', '\r', '\x2', '\x2', '\x84', '\x85', '\a', 
		'*', '\x2', '\x2', '\x85', '\x86', '\a', '\xE', '\x2', '\x2', '\x86', 
		'\x87', '\x5', '\x1C', '\xF', '\x2', '\x87', '\x89', '\a', '\xF', '\x2', 
		'\x2', '\x88', '\x8A', '\x5', '\x1C', '\xF', '\x2', '\x89', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\a', '*', '\x2', 
		'\x2', '\x8C', '\x8D', '\a', '\xE', '\x2', '\x2', '\x8D', '\x8F', '\x5', 
		'\x1C', '\xF', '\x2', '\x8E', '\x90', '\a', '\x10', '\x2', '\x2', '\x8F', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x92', '\x3', '\x2', '\x2', '\x2', '\x91', 'x', '\x3', 
		'\x2', '\x2', '\x2', '\x91', 'z', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x91', '|', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '}', '\x3', '\x2', '\x2', '\x2', '\x91', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x91', '\x83', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x94', '\f', '\a', '\x2', '\x2', '\x94', '\x95', '\a', '\f', 
		'\x2', '\x2', '\x95', '\xC0', '\x5', '\x1C', '\xF', '\b', '\x96', '\x97', 
		'\f', '\x6', '\x2', '\x2', '\x97', '\x98', '\x5', '\xE', '\b', '\x2', 
		'\x98', '\x99', '\x5', '\x1C', '\xF', '\a', '\x99', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9B', '\f', '\xE', '\x2', '\x2', '\x9B', '\x9C', 
		'\a', '\x6', '\x2', '\x2', '\x9C', '\xC0', '\x5', '\x18', '\r', '\x2', 
		'\x9D', '\x9E', '\f', '\r', '\x2', '\x2', '\x9E', '\x9F', '\a', '\a', 
		'\x2', '\x2', '\x9F', '\xA0', '\x5', '\x14', '\v', '\x2', '\xA0', '\xA1', 
		'\a', '\b', '\x2', '\x2', '\xA1', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA3', '\f', '\f', '\x2', '\x2', '\xA3', '\xA4', '\a', '\a', 
		'\x2', '\x2', '\xA4', '\xA5', '\x5', '\x10', '\t', '\x2', '\xA5', '\xA6', 
		'\a', '\b', '\x2', '\x2', '\xA6', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA8', '\f', '\v', '\x2', '\x2', '\xA8', '\xA9', '\a', '\a', 
		'\x2', '\x2', '\xA9', '\xAA', '\x5', '\x10', '\t', '\x2', '\xAA', '\xAB', 
		'\a', '\t', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x10', '\t', '\x2', 
		'\xAC', '\xAD', '\a', '\b', '\x2', '\x2', '\xAD', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAF', '\f', '\t', '\x2', '\x2', '\xAF', '\xB0', 
		'\a', '\x3', '\x2', '\x2', '\xB0', '\xB5', '\x5', '\x1C', '\xF', '\x2', 
		'\xB1', '\xB2', '\a', '\v', '\x2', '\x2', '\xB2', '\xB4', '\x5', '\x1C', 
		'\xF', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB9', 
		'\a', '\x4', '\x2', '\x2', '\xB9', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBB', '\f', '\b', '\x2', '\x2', '\xBB', '\xBD', '\a', ',', '\x2', 
		'\x2', '\xBC', '\xBE', '\x5', '\x1A', '\xE', '\x2', '\xBD', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xBF', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\x96', '\x3', '\x2', '\x2', '\x2', '\xBF', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '.', '\x39', '\x41', 'L', 'W', '_', '\x64', 
		'm', 'q', 'v', '\x89', '\x8F', '\x91', '\xB5', '\xBD', '\xBF', '\xC1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BuildXL.Execution.Analyzer.JPath
